name: Deploy to EC2

on:
    push:
        branches:
            - main
        paths:
            - "characters/**" # Trigger on changes in the characters folder and subfolders

    workflow_dispatch: # Allow manual triggering

jobs:
    deploy:
        runs-on: ubuntu-latest
        environment: production # Assumes you have a GitHub environment named 'production'

        # Environment variables centralized
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}
            EC2_HOST: ${{ secrets.EC2_HOST }}
            EC2_USER: ${{ secrets.EC2_USER }}
            EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
            ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
            TWITTER_USERNAME: ${{ secrets.TWITTER_USERNAME }}
            TWITTER_PASSWORD: ${{ secrets.TWITTER_PASSWORD }}
            TWITTER_EMAIL: ${{ secrets.TWITTER_EMAIL }}
            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
            EVM_PRIVATE_KEY: ${{ secrets.EVM_PRIVATE_KEY }}
            EVM_PROVIDER_URL: ${{ secrets.EVM_PROVIDER_URL }}
            ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
            POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
            DISCORD_APPLICATION_ID: ${{ secrets.DISCORD_APPLICATION_ID }}
            DISCORD_API_TOKEN: ${{ secrets.DISCORD_API_TOKEN }}
            CACHE_STORE: database
            TWITTER_POLL_INTERVAL: 300
            POST_INTERVAL_MIN: 600 # Default: 90
            POST_INTERVAL_MAX: 800 # Default: 180
            POST_IMMEDIATELY: false
            MAX_TWEET_LENGTH: 800
            TWITTER_COOKIES: ${{ secrets.TWITTER_COOKIES }}
            DEFAULT_MAX_THREAD_TWEET_LENGTH: 250
            DEFAULT_LOG_LEVEL: info
            ACTION_INTERVAL: 25 # Interval in milliseconds between action processing runs (default: 5 minutes)
            ENABLE_ACTION_PROCESSING: true # Set to true to enable the action processing loop
            MAX_ACTIONS_PROCESSING: 3
            NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}

        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Set up AWS Credentials
              run: |
                  aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                  aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                  aws configure set default.region $AWS_REGION

            - name: Login to Amazon ECR
              run: |
                  aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY

            - name: Build and Push Docker image
              run: |
                  docker build -t eliza-trader-tee --no-cache .
                  echo "Image built successfully!"
                  docker tag eliza-trader-tee:latest $ECR_REPOSITORY:latest
                  echo "Image tagged successfully!"
                  docker push $ECR_REPOSITORY:latest
                  echo "Image pushed successfully!"

            - name: Create SSH Key File
              run: |
                  echo "$EC2_PRIVATE_KEY" > eliza-key.pem
                  chmod 600 eliza-key.pem

            - name: Deploy to EC2
              run: |
                  ssh -i eliza-key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST <<EOF

                  # Login to AWS ECR
                  aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY

                  # Pull the latest version of the Docker image
                  echo "Pulling latest Docker image..."
                  docker pull $ECR_REPOSITORY:latest

                  # Stop and remove any existing container
                  echo "Stopping existing Docker container if it exists..."
                  docker stop sailor-app-container || true
                  docker rm sailor-app-container || true

                  # Run a new Docker container
                  echo "Starting new Docker container..."
                  docker run -d -p 8080:80 \
                    --name sailor-app-container \
                    -e TWITTER_USERNAME=$TWITTER_USERNAME \
                    -e TWITTER_PASSWORD=$TWITTER_PASSWORD \
                    -e TWITTER_EMAIL=$TWITTER_EMAIL \
                    -e OPENAI_API_KEY=$OPENAI_API_KEY \
                    -e EVM_PRIVATE_KEY=$EVM_PRIVATE_KEY \
                    -e EVM_PROVIDER_URL=$EVM_PROVIDER_URL \
                    -e TWITTER_POLL_INTERVAL=$TWITTER_POLL_INTERVAL \
                    -e ANTHROPIC_API_KEY=$ANTHROPIC_API_KEY \
                    -e POST_INTERVAL_MIN=$POST_INTERVAL_MIN \
                    -e POST_INTERVAL_MAX=$POST_INTERVAL_MAX \
                    -e POST_IMMEDIATELY=$POST_IMMEDIATELY \
                    -e POSTGRES_URL=$POSTGRES_URL \
                    -e MAX_TWEET_LENGTH=$MAX_TWEET_LENGTH \
                    -e ACTION_INTERVAL=$ACTION_INTERVAL \
                    -e MAX_ACTIONS_PROCESSING=$MAX_ACTIONS_PROCESSING \
                    -e ENABLE_ACTION_PROCESSING=$ENABLE_ACTION_PROCESSING \
                    -e CACHE_STORE=$CACHE_STORE \
                    -e DISCORD_APPLICATION_ID=$DISCORD_APPLICATION_ID \
                    -e DISCORD_API_TOKEN=$DISCORD_API_TOKEN \
                    -e TWITTER_COOKIES=$TWITTER_COOKIES \
                    -e DEFAULT_MAX_THREAD_TWEET_LENGTH=$DEFAULT_MAX_THREAD_TWEET_LENGTH \
                    -e DEFAULT_LOG_LEVEL=$DEFAULT_LOG_LEVEL \
                    -e NEWS_API_KEY=$NEWS_API_KEY \
                    $ECR_REPOSITORY:latest && echo "Container started successfully" || echo "Failed to start container"

                  sleep 30

                  echo "Checking container status..."
                  if docker ps | grep -q sailor-app-container; then
                    echo "Container is running."
                  else
                    echo "Container is not running."
                  fi

                  echo "Container logs:"
                  docker logs sailor-app-container || echo "Failed to fetch logs"

                  EOF
