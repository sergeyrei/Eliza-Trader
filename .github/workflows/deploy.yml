name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest  # Use your self-hosted runner (or choose a different runner)

    steps:
    # Step 1: Checkout the code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Set up AWS credentials
    - name: Set up AWS Credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ${{ secrets.AWS_REGION }}

    # Step 3: Login to Amazon ECR
    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

    # Step 5: Create SSH Key File
    - name: Create SSH Key File
      run: |
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > eliza-key.pem
        chmod 600 eliza-key.pem

    # Step 6: Deploy to EC2
    - name: Deploy to EC2
      run: |
        ssh -i eliza-key.pem \
          -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<EOF

          # Login to AWS ECR
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

          # Pull the latest version of the Docker image
          echo "Pulling latest Docker image..."
          docker pull ${{ secrets.ECR_REPOSITORY }}:latest

          # Run a new Docker container
          echo "Starting new Docker container..."
          docker run -d -p 80:80 \
            --name sailor-app-container \
            -e TWITTER_USERNAME=\${{ secrets.TWITTER_USERNAME }} \
            -e TWITTER_PASSWORD=\${{ secrets.TWITTER_PASSWORD }} \
            -e TWITTER_EMAIL=\${{ secrets.TWITTER_EMAIL }} \
            -e OPENAI_API_KEY=\${{ secrets.OPENAI_API_KEY }} \
            ${{ secrets.ECR_REPOSITORY }}:latest && echo "Container started successfully" || echo "Failed to start container"

          # Give the container some time to start and initialize
          sleep 30

          # Check container status to confirm it's running
          echo "Checking container status..."
          if docker ps | grep -q sailor-app-container; then
            echo "Container is running."
          else
            echo "Container is not running."
          fi

          # Fetch logs to see what's happening inside the container
          echo "Container logs:"
          docker logs sailor-app-container || echo "Failed to fetch logs"

          EOF